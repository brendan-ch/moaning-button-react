{"version":3,"sources":["moaning-sound.mp3","Socket.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","socket","io","SocketIOFunctions","connect","disconnect","value","emit","Bottom","appearance","connected","connecting","count","onConnectDisconnect","onAppearanceChange","className","style","backgroundColor","color","marginRight","onClick","App","props","_onConnect","setState","console","log","_onDisconnect","_onConnectDisconnect","state","_onMoan","playing","push","id","Math","round","toString","status","position","window","open","forceUpdate","_onUpdateCount","_onAppearanceChange","localStorage","setItem","getItem","onConnect","onDisconnect","onMoan","onUpdateCount","this","on","numPeople","number","random","map","item","url","moanfile","playStatus","onPlaying","object","index","findIndex","element","onFinishedPlaying","splice","length","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca388336.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/moaning-sound.4c999de4.mp3\";","import io from 'socket.io-client';\r\nconst socket = io(\"https://moaning-button.herokuapp.com\");\r\n// socket.connect();\r\n\r\nconst SocketIO = (onConnect, onDisconnect, onMoan, onUpdateCount) => {\r\n  console.log(\"Doing stuff\");\r\n\r\n  socket.on('connect', () => {\r\n    onConnect();\r\n    console.log(\"Connected to server.\");\r\n  })\r\n\r\n  socket.on('disconnect', () => {\r\n    onDisconnect();\r\n    console.log(\"Disconnected from server.\");\r\n  })\r\n\r\n  socket.on('updateCount', (numPeople) => {\r\n    onUpdateCount(numPeople);\r\n  })\r\n\r\n  socket.on('moanOut', (value) => {\r\n    onMoan(value);\r\n    console.log(\"Moan value:\", value)\r\n  })\r\n}\r\n\r\nconst SocketIOFunctions = {\r\n  connect: () => {\r\n    socket.connect();\r\n  },\r\n  disconnect: () => {\r\n    socket.disconnect();\r\n  },\r\n  moan: (value) => {\r\n    socket.emit(\"moanIn\", value);\r\n  }\r\n}\r\n\r\nexport { SocketIO, SocketIOFunctions  };","import React from 'react';\r\nimport Sound from 'react-sound';\r\nimport './App.css';\r\n\r\nimport moanfile from './moaning-sound.mp3';\r\n\r\nimport { SocketIO, SocketIOFunctions } from './Socket';\r\n\r\nfunction Bottom({ appearance, connected, connecting, count, onConnectDisconnect, onAppearanceChange }) {\r\n  return (\r\n    <header\r\n        className=\"App-bottom\"\r\n        style={{ backgroundColor: appearance === \"dark\" ? \"black\" : \"white\" }}\r\n      >\r\n        <div className=\"Status\">\r\n          <p\r\n            style={{ color: appearance === \"dark\" ? \"white\" : \"black\" , marginRight: 8}}\r\n          >\r\n            {\r\n              connected ?\r\n                count === 2 ?\r\n                  \"You are in the moaning room with 1 other person.\"\r\n                :\r\n                  \"You are in the moaning room with \" + (count - 1) + \" other people.\"\r\n              :\r\n                connecting ?\r\n                  \"Joining the moaning room... \"\r\n                :\r\n                  \"You are not in the moaning room.\"\r\n            }\r\n          </p>\r\n          <p \r\n            className=\"Small-button\"\r\n            onClick={onConnectDisconnect}\r\n          >\r\n            {connected ? \"Leave\" : \"Join\"}\r\n          </p>\r\n        </div>\r\n        <p \r\n          className=\"Small-button\"\r\n          onClick={onAppearanceChange}\r\n        >\r\n          {\r\n            appearance === \"dark\" ?\r\n              \"Light mode\"\r\n            :\r\n              \"Dark mode\"\r\n          }\r\n        </p>\r\n      </header>\r\n  )\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      appearance: localStorage.getItem('appearance') || 'light',\r\n      connected: false,\r\n      connecting: true,\r\n      count: 0,\r\n      // playing: []\r\n    }\r\n\r\n    this.playing = []\r\n  }\r\n\r\n  componentDidMount() {\r\n    SocketIO(this._onConnect, this._onDisconnect, this._onMoan, this._onUpdateCount);\r\n    SocketIOFunctions.connect();\r\n  }\r\n\r\n  _onConnect = () => {\r\n    this.setState({ connected: true, connecting: false });\r\n    // setConnected(true);\r\n    // setConnecting(false);\r\n    console.log(\"Connected to moaning room.\")\r\n  };\r\n\r\n  _onDisconnect = () => {\r\n    // setConnected(false);\r\n    this.setState({ connected: false });\r\n    console.log(\"Disconnected from moaning room.\");\r\n  };\r\n\r\n  _onConnectDisconnect = () => {  // when leave/join button is pressed\r\n    if (this.state.connected) {\r\n      SocketIOFunctions.disconnect();\r\n    } else {\r\n      this.setState({ connecting: true });\r\n      SocketIOFunctions.connect();\r\n    }\r\n  }\r\n\r\n  _onMoan = (value) => {\r\n    // this.setState({ playing: this.state.playing.concat([0]) });\r\n    this.playing.push({\r\n      id: (Math.round(value * 100000000)).toString(),\r\n      status: \"PLAYING\",\r\n      position: 0,\r\n    });\r\n    console.log(\"uuuuuuuuuuuaUAAAAAAAAAAAAAAAHHHHh\");\r\n    console.log(value);\r\n\r\n    if (value > 0.999) {\r\n      window.open(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\", \"_blank\");\r\n    }\r\n    this.forceUpdate();  // forces render of moans\r\n  };\r\n\r\n  _onUpdateCount = (value) => {\r\n    this.setState({ count: value });\r\n    console.log(`Updated count to ${value}`);\r\n  };\r\n\r\n  _onAppearanceChange = () => {\r\n    this.setState({ appearance: this.state.appearance === \"light\" ? \"dark\" : \"light\" });\r\n    localStorage.setItem(\"appearance\", this.state.appearance === \"light\" ? \"dark\" : \"light\");\r\n    console.log(\"Changed appearance.\");\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   SocketIO(_onConnect, _onDisconnect, _onMoan, _onUpdateCount);\r\n  //   SocketIOFunctions.connect();\r\n  // }, [])\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header \r\n          className=\"App-header\"\r\n          style={{ backgroundColor: this.state.appearance === \"dark\" ? \"black\" : \"white\" }}\r\n        >\r\n          <div \r\n            className=\"Button\"\r\n            onClick={() => {\r\n              // this.state.(playing.concat([0]));\r\n              // console.log(\"\");\r\n              const number = Math.random();\r\n              if (this.state.connected) {\r\n                SocketIOFunctions.moan(number);\r\n              } else {\r\n                this._onMoan(number);\r\n              }\r\n            }}\r\n          >\r\n            <p className=\"Button-text\">do the moan</p>\r\n          </div>\r\n        </header>\r\n        <Bottom \r\n          appearance={this.state.appearance} \r\n          connected={this.state.connected}\r\n          connecting={this.state.connecting}\r\n          count={this.state.count}\r\n          onAppearanceChange={this._onAppearanceChange}\r\n          onConnectDisconnect={this._onConnectDisconnect} \r\n        />\r\n        {this.playing.map((item) => <Sound \r\n          url={moanfile}\r\n          playStatus={item.status}\r\n          position={item.position}\r\n          onPlaying={(object) => {\r\n            const index = this.playing.findIndex((element) => element.id === item.id);\r\n            this.playing[index] = {...this.playing[index], position: object.position};\r\n\r\n            // this.forceUpdate();\r\n          }}\r\n          onFinishedPlaying={() => {\r\n            const index = this.playing.findIndex((element) => element.id === item.id);\r\n            this.playing.splice(index, 1);\r\n            console.log(\"Modified playing state\");\r\n            console.log(this.playing);\r\n\r\n            if (this.playing.length === 0) {\r\n              this.forceUpdate();\r\n            }\r\n          }} \r\n        /> )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}